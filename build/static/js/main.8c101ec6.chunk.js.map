{"version":3,"sources":["images/wallet.png","images/walletWhite.svg","services/index.js","actions/index.js","pages/Login.js","components/Header.js","components/Forms.js","components/Table.js","components/FormEdit.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","fetchCoinsAPI","a","fetch","currencies","json","data","getCurrencies","type","Login","state","email","inputPassword","handleChange","bind","target","name","value","this","setState","password","validEmail","test","validPassword","length","props","getEmail","history","className","src","wallet","alt","htmlFor","id","data-testid","onChange","disabled","disabledButton","onClick","sessionStorage","setItem","push","React","Component","connect","dispatch","getLogin","Header","expenses","totalValue","reduce","acc","expense","cotacao","exchangeRates","currency","ask","valorCotado","Number","toFixed","getItem","user","Forms","description","method","tag","handleInitialState","getCurrencie","coins","Object","keys","getInfo","html","map","coin","index","key","currience","then","getCurrecies","error","requestApiFail","message","Table","deleteButton","getEditExp","gasto","valor","currencyName","split","icon","faPen","faTrashCan","deleteExp","editExpense","moedas","handleStateWithInfo","editInfo","undefined","values","editedExpense","code","codein","getEditedExpense","Wallet","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","action","walletReducer","filter","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.8c101ec6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallet.fea8b2be.png\";","module.exports = __webpack_public_path__ + \"static/media/walletWhite.4d2397ea.svg\";","const fetchCoinsAPI = async () => {\n  const url = 'https://economia.awesomeapi.com.br/json/all';\n  const currencies = await fetch(url);\n  const data = await currencies.json();\n  return data;\n};\n\nexport default fetchCoinsAPI;\n","import fetchCoinsAPI from '../services';\n// Coloque aqui suas actions\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const CHANGE_WALLET = 'CHANGE_WALLET';\nexport const REQUEST_API = 'REQUEST_API';\nexport const REQUEST_FAIL = 'REQUEST_FAIL';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const GET_EDIT_EXPENSE = 'GET_EDIT_EXPENSE';\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\n\nexport const getLogin = (email) => ({\n  type: LOGIN_USER,\n  email,\n});\n\nexport const requestApi = () => ({\n  type: REQUEST_API,\n});\n\nexport const getCurrecies = (expense, coins) => ({\n  type: CHANGE_WALLET,\n  expense,\n  exchangeRates: coins,\n});\n\nexport const requestApiFail = (error) => ({\n  type: REQUEST_FAIL,\n  error,\n});\n\nexport const getCurrencies = (currencies) => ({\n  type: GET_CURRENCIES,\n  currencies,\n});\n\nexport const fetchCurriencies = (expense) => (dispatch) => {\n  dispatch(requestApi());\n  return fetchCoinsAPI().then(\n    (coins) => dispatch(getCurrecies(expense, coins)),\n    (error) => dispatch(requestApiFail(error.message)),\n  );\n};\n\nexport const deleteExp = (expense) => ({\n  type: DELETE_EXPENSE,\n  expense,\n});\n\nexport const editExpense = (expense) => ({\n  type: EDIT_EXPENSE,\n  expense,\n});\n\nexport const getEditedExpense = (expense) => ({\n  type: GET_EDIT_EXPENSE,\n  expense,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getLogin } from '../actions';\nimport wallet from '../images/wallet.png';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../css/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      inputPassword: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  // Link consultado para fazer a validação do email\n  // Source: 'https://www.horadecodar.com.br/2020/09/13/como-validar-email-com-javascript/'\n  disabledButton(email, password) {\n    const MIN_LENGTH = 6;\n    const verificaEmail = /\\S+@\\S+\\.\\S+/;\n    const validEmail = verificaEmail.test(email);\n    const validPassword = password.length >= MIN_LENGTH;\n    const validInputs = validEmail && validPassword;\n    return validInputs;\n  }\n\n  render() {\n    const { email, inputPassword } = this.state;\n    const { getEmail, history } = this.props;\n    return (\n      <div className=\"div-form\">\n        <section className=\"div-logo\">\n          <h1>My Wallet</h1>\n          <img src={ wallet } alt=\"Wallet Logo\" />\n        </section>\n        <section className=\"section-form\">\n          <label htmlFor=\"email\" className=\"form-label\">\n            Email\n            <input\n              className=\"form-control\"\n              name=\"email\"\n              type=\"email\"\n              id=\"email\"\n              data-testid=\"email-input\"\n              value={ email }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"password\" className=\"form-label\">\n            Password\n            <input\n              className=\"form-control\"\n              name=\"inputPassword\"\n              type=\"password\"\n              id=\"password\"\n              data-testid=\"password-input\"\n              value={ inputPassword }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <button\n            className=\"btn btn-primary\"\n            type=\"button\"\n            disabled={ !this.disabledButton(email, inputPassword) }\n            onClick={ () => {\n              sessionStorage.setItem('email', email);\n              getEmail(email);\n              history.push('/carteira');\n            } }\n          >\n            Entrar\n          </button>\n        </section>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  getEmail: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getEmail: (email) => dispatch(getLogin(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport wallet from '../images/walletWhite.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../css/Header.css';\n\nclass Header extends React.Component {\n  render() {\n    const { expenses } = this.props;\n    const totalValue = expenses\n      ? expenses.reduce((acc, expense) => {\n        const cotacao = expense.exchangeRates[expense.currency].ask;\n        const valorCotado = (Number(expense.value) * cotacao).toFixed(2);\n        acc += Number(Number(valorCotado).toFixed(2));\n        return acc;\n      }, 0)\n      : '';\n    return (\n      <div className='container-header'>\n        <div className=\"div-header\">\n          <section className=\"div-logo logo\">\n            <h1>My Wallet</h1>\n            <img src={wallet} alt=\"Wallet Logo\" />\n          </section>\n          <section className=\"section-info\">\n            <p data-testid=\"email-field\" className=\"email\">\n              { sessionStorage.getItem('email') }\n            </p>\n            <section className=\"info\">\n              <p data-testid=\"total-field\" className=\"despesa\">\n                Total:\n              </p>\n              <p>\n                R$\n              </p>\n              <span>{totalValue}</span>\n              <span data-testid=\"header-currency-field\">BRL</span>\n            </section>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchCoinsAPI from '../services';\nimport { fetchCurriencies, getCurrencies } from '../actions';\nimport '../css/Forms.css';\n\nclass Forms extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: '',\n      tag: '',\n      id: 0,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleInitialState = this.handleInitialState.bind(this);\n  }\n\n  async componentDidMount() {\n    const { getCurrencie } = this.props;\n    const coins = await fetchCoinsAPI();\n    getCurrencie(Object.keys(coins));\n  }\n\n  handleInitialState() {\n    this.setState((state) => ({\n      id: state.id + 1,\n      value: '',\n      description: '',\n      method: '',\n    }));\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { getInfo, currencies } = this.props;\n    const {\n      id,\n      value,\n      description,\n      tag,\n      currency,\n      method,\n    } = this.state;\n    return (\n      <div className=\"div-putInfo\">\n        <div className=\"input-group mb-3\">\n          <span html=\"description\" className=\"input-group-text\">\n            Descrição\n          </span>\n          <input\n            name=\"description\"\n            id=\"description\"\n            type=\"text\"\n            value={description}\n            onChange={this.handleChange}\n            data-testid=\"description-input\"\n          />\n        </div>\n        <div className=\"input-group input-group-sm mb-3\">\n          <span html=\"valor\" className=\"input-group-text\">\n            Valor\n          </span>\n          <input\n            name=\"value\"\n            id=\"valor\"\n            type=\"number\"\n            data-testid=\"value-input\"\n            value={value}\n            onChange={this.handleChange}\n          />\n        </div>\n        <div className=\"input-group mb-3\">\n          <span htmlFor=\"method\" className=\"input-group-text\">\n            Pagamento\n          </span>\n          <select\n            className=\"form-select\"\n            name=\"method\"\n            value={method}\n            id=\"method\"\n            onChange={this.handleChange}\n            data-testid=\"method-input\"\n          >\n            <option> </option>\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </div>\n        <div className=\"input-group mb-3\">\n          <span htmlFor=\"tag\" className=\"input-group-text\">\n            Tag\n          </span>\n          <select\n            className=\"form-select\"\n            name=\"tag\"\n            value={tag}\n            id=\"tag\"\n            onChange={this.handleChange}\n            data-testid=\"tag-input\"\n          >\n            <option> </option>\n            <option value=\"Alimentção\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </div>\n        <div className=\"input-group mb-3\">\n          <label htmlFor=\"currency\" className=\"label-coin\">\n            <span className=\"input-group-text\">\n              Moeda\n            </span>\n            <select\n              className=\"form-select\"\n              name=\"currency\"\n              id=\"currency\"\n              value={currency}\n              onChange={this.handleChange}\n              data-testid=\"currency-input\"\n            >\n              {currencies ? currencies.map((coin, index) => {\n                if (coin === 'USDT' || coin === 'BRLT') {\n                  return '';\n                }\n                return (\n                  <option\n                    key={index}\n                    value={coin}\n                    data-testid={coin}\n                  >\n                    {coin}\n                  </option>);\n              }) : ''}\n            </select>\n          </label>\n        </div>\n        <button\n          className=\"btn btn-primary btn-sm\"\n          type=\"button\"\n          onClick={() => {\n            getInfo({\n              id,\n              value,\n              description,\n              currency,\n              method,\n              tag,\n            });\n            this.handleInitialState();\n          }}\n        >\n          Adicionar despesa\n        </button>\n      </div>\n    );\n  }\n}\n\nForms.propTypes = {\n  getInfo: PropTypes.func.isRequired,\n  getCurrencie: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getInfo: (currience) => dispatch(fetchCurriencies(currience)),\n  getCurrencie: (currencies) => dispatch(getCurrencies(currencies)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Forms);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashCan, faPen } from '@fortawesome/free-solid-svg-icons';\nimport { deleteExp, editExpense } from '../actions';\nimport '../css/Table.css';\n\nclass Table extends React.Component {\n  // Links consultados para a criação da tabela\n  // Source: https://www.homehost.com.br/blog/criar-sites/tabela-html/\n  // Source: https://github.com/testing-library/dom-testing-library/issues/583/\n\n  render() {\n    const { expenses, deleteButton, getEditExp } = this.props;\n\n    return (\n      <div className=\"table-div\">\n        <table className=\"table table-dark table-striped\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            { expenses ? expenses.map((gasto, index) => {\n              const { value, description, currency, method, tag, exchangeRates } = gasto;\n              const cotacao = Number(exchangeRates[currency].ask).toFixed(2);\n              const valor = Number(value).toFixed(2);\n              const valorCotado = (valor * exchangeRates[currency].ask).toFixed(2);\n              const currencyName = exchangeRates[currency].name.split('/');\n              return (\n                <tr key={ gasto.id }>\n                  <td>{ index }</td>\n                  <td>{ description }</td>\n                  <td>{ tag }</td>\n                  <td>{ method }</td>\n                  <td>{ valor }</td>\n                  <td>{ currencyName[0] }</td>\n                  <td>{ cotacao }</td>\n                  <td>{ valorCotado }</td>\n                  <td>Real</td>\n                  <td className=\"buttons\">\n                    <FontAwesomeIcon\n                      type=\"button\"\n                      data-testid=\"edit-btn\"\n                      onClick={ () => getEditExp(gasto) }\n                      icon={ faPen }\n                    />\n                    <FontAwesomeIcon\n                      type=\"button\"\n                      data-testid=\"delete-btn\"\n                      onClick={ () => deleteButton(gasto) }\n                      icon={ faTrashCan }\n                    />\n                  </td>\n                </tr>\n              );\n            }) : 'ola'}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteButton: PropTypes.func.isRequired,\n  getEditExp: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteButton: (expense) => dispatch(deleteExp(expense)),\n  getEditExp: (expense) => dispatch(editExpense(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchCoinsAPI from '../services';\nimport { getEditedExpense, getCurrencies } from '../actions';\nimport '../css/FormEdit.css';\n\nclass Forms extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: '',\n      tag: '',\n      exchangeRates: '',\n      moedas: [],\n      id: 0,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleInitialState = this.handleInitialState.bind(this);\n    this.handleStateWithInfo = this.handleStateWithInfo.bind(this);\n  }\n\n  async componentDidMount() {\n    this.handleStateWithInfo();\n    const { getCurrencie } = this.props;\n    const coins = await fetchCoinsAPI();\n    getCurrencie(Object.keys(coins));\n  }\n\n  async handleStateWithInfo() {\n    const { editInfo } = this.props;\n    const coins = await fetchCoinsAPI();\n    this.setState({\n      value: editInfo !== undefined ? Number(editInfo.value) : '',\n      description: editInfo !== undefined ? editInfo.description : '',\n      currency: editInfo !== undefined ? editInfo.currency : '',\n      method: editInfo !== undefined ? editInfo.method : '',\n      tag: editInfo !== undefined ? editInfo.tag : '',\n      exchangeRates: editInfo !== undefined ? editInfo.exchangeRates : '',\n      moedas: editInfo !== undefined ? Object.values(coins) : '',\n      id: editInfo !== undefined ? editInfo.id : '',\n    });\n  }\n\n  handleInitialState() {\n    this.setState({\n      value: '',\n      description: '',\n      method: '',\n    });\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { editedExpense } = this.props;\n    const {\n      id,\n      value,\n      description,\n      tag,\n      currency,\n      method,\n      exchangeRates,\n      moedas,\n    } = this.state;\n    return (\n      <div className=\"div-Info\">\n      <div className=\"input-group mb-3\">\n        <span html=\"description\" className=\"input-group-text\">\n          Descrição\n        </span>\n        <input\n          name=\"description\"\n          id=\"description\"\n          type=\"text\"\n          value={ description }\n          onChange={ this.handleChange }\n          data-testid=\"description-input\"\n        />\n      </div>\n        <div className=\"input-group input-group-sm mb-3\">\n          <span html=\"valor\" className=\"input-group-text\">\n            Valor\n          </span>\n          <input\n            name=\"value\"\n            id=\"valor\"\n            type=\"number\"\n            data-testid=\"value-input\"\n            value={ value }\n            onChange={ this.handleChange }\n          />\n        </div>\n        <div className=\"input-group mb-3\">\n          <span htmlFor=\"method\" className=\"input-group-text\">\n            Pagamento\n          </span>\n          <select\n            className=\"form-select\"\n            name=\"method\"\n            value={ method }\n            id=\"method\"\n            onChange={ this.handleChange }\n            data-testid=\"method-input\"\n          >\n            <option> </option>\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </div>\n        <div className=\"input-group mb-3\">\n          <span htmlFor=\"tag\" className=\"input-group-text\">\n            Tag\n          </span>\n          <select\n            className=\"form-select\"\n            name=\"tag\"\n            value={ tag }\n            id=\"tag\"\n            onChange={ this.handleChange }\n            data-testid=\"tag-input\"\n          >\n            <option> </option>\n            <option value=\"Alimentção\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </div>\n        <div className=\"input-group mb-3\">\n          <label htmlFor=\"currency\" className=\"label-coin\">\n            <span className=\"input-group-text\">\n              Moeda\n            </span>\n            <select\n              className=\"form-select\"\n              name=\"currency\"\n              id=\"currency\"\n              value={ currency }\n              onChange={ this.handleChange }\n              data-testid=\"currency-input\"\n            >\n              { moedas ? moedas.map((coin, index) => {\n                if (coin.code === 'USDT' || coin.codein === 'BRLT') {\n                  return '';\n                }\n                return (\n                  <option\n                    key={ index }\n                    value={ coin.code }\n                    data-testid={ coin.code }\n                  >\n                    { coin.code }\n                  </option>);\n              }) : ''}\n            </select>\n          </label>\n        </div>\n        <button\n          className=\"btn btn-primary btn-sm\"\n          type=\"button\"\n          onClick={ () => {\n            editedExpense({\n              id,\n              value,\n              description,\n              currency,\n              method,\n              tag,\n              exchangeRates,\n            });\n            this.handleInitialState();\n          } }\n        >\n          Editar despesa\n        </button>\n      </div>\n    );\n  }\n}\n\nForms.propTypes = {\n  editedExpense: PropTypes.func.isRequired,\n  getCurrencie: PropTypes.func.isRequired,\n  editInfo: PropTypes.shape({\n    value: PropTypes.number,\n    description: PropTypes.string,\n    currency: PropTypes.string,\n    method: PropTypes.string,\n    tag: PropTypes.string,\n    exchangeRates: PropTypes.objectOf(PropTypes.object),\n    id: PropTypes.string,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  editInfo: state.wallet.editExpense,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  editedExpense: (expense) => dispatch(getEditedExpense(expense)),\n  getCurrencie: (currencies) => dispatch(getCurrencies(currencies)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Forms);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Forms from '../components/Forms';\nimport Table from '../components/Table';\nimport FormEdit from '../components/FormEdit';\n\nclass Wallet extends React.Component {\n  render() {\n    const { editInfo } = this.props;\n    return (\n      <div>\n        <Header />\n        <section>\n          { editInfo !== undefined && editInfo.value > 0 ? <FormEdit /> : <Forms /> }\n        </section>\n        <Table />\n      </div>\n    );\n  }\n}\n\n\nWallet.propTypes = {\n  editInfo: PropTypes.shape({\n    value: PropTypes.string,\n    description: PropTypes.string,\n    currency: PropTypes.string,\n    method: PropTypes.string,\n    tag: PropTypes.string,\n    exchangeRates: PropTypes.objectOf(PropTypes.object),\n    id: PropTypes.string,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  editInfo: state.wallet.editExpense,\n});\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN_USER } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOGIN_USER:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import {\n  CHANGE_WALLET,\n  DELETE_EXPENSE,\n  REQUEST_API, GET_EDIT_EXPENSE, EDIT_EXPENSE, GET_CURRENCIES } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  editExpense: {},\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_API:\n    return state;\n  case GET_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.currencies,\n    };\n  case CHANGE_WALLET:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        {\n          ...action.expense,\n          exchangeRates: action.exchangeRates,\n        },\n      ],\n      currencies: Object.keys(action.exchangeRates),\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense !== action.expense),\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      editExpense: action.expense,\n    };\n  case GET_EDIT_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.map((expense) => {\n        if (expense.id === action.expense.id) {\n          return action.expense;\n        }\n        return expense;\n      }),\n      editExpense: {},\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport walletReducer from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst reducer = combineReducers({ user: userReducer, wallet: walletReducer });\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}